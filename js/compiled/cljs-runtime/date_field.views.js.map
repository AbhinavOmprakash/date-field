{"version":3,"sources":["date_field/views.cljs"],"mappings":";AAMA,GAAA,QAAAA,uCAAAC,6CAAAC;AAAA;AAAA,AAAA,AAASC,iCAAc,6CAAA,7CAACC;;AAGxB,AAAKC,+BACH,6CAAA,2CAAA,gEAAA,GAAA,+DAAA,2CAAA,uDAAA,GAAA,mDAAA,WAAA,yDAAA,2CAAA,gEAAA,MAAA,+DAAA,2CAAA,uDAAA,MAAA,mDAAA,MAAA,sDAAA,7zBAACD;AASH,6BAAA,7BAAME,kEACHC,KAAKC;AADR,AAEE,QAAA,WAAAC,fAAMC;AAAN,AAAS,sDAAAD,/CAACE,gEAASH;;IACbI,MAAI,AAACC,gDAAO,EAAA,AAAAC,FAACJ,kBAAGL;AADtB,AAKE,GAAI,0BAAA,AAAAS,1BAACC,0CAAWZ,gCAAcI;AAC5B,sDAAA,AAAAO,gDAAA,wFAAA,vLAACH,+DAAQR,mHAAeI;;AACxB,AAAK,uGAAA,2CAAA,gDAAA,WAAAS,7MAACC,mDAAMd,+BAAce,gBAAMX;AAA3B,AAAqC,sDAAAS,/CAACL,gEAASH;GAA/C,wDACwCI;;AACxCA;;;AAIX,0CAAA,1CAAMO,4FACHC;AADH,AAEE,IAAMC,cAAY,yDACGD;AADH,AAEE,OAACE,+CAAO,WAAKC,IAAIC;AAAT,AACE,GAAI,AAACC,2BAAWD;AACd,IAAME,QAAM,AAACC,cAAIH;AAAjB,AACE,GACE,AAACI,yBAASF;AACV,OAACG,6CAAKN,IAAIG;;AAFZ,GAIE,AAACI,qBAAKJ;AACN,OAACK,6CAAKR,IAAI,AAACS,+CAAKN;;AALlB;;;;AAMFF;;GATZ,iCAWQJ;;AAb5B,AAcE,UAAK,AAACa,uBAAOC,uBAAO,AAACb,YAAYD;;AAGrC,iCAAA,yCAAAe,1EAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEACWI;wBADX,AAAAF,4CAAAF,eAAA,/EACcK;qBADd,AAAAH,4CAAAF,eAAA,8DAAA,1IACgCM;eADhC,AAAAJ,4CAAAF,eAAA,tEACyCO,mIAEvBC;AAHlB,AAIE,aAAA,AAAA9B,TAAM+B,yBAAQ,AAACvC,2BAAUkC,GAAGC;IACtBC,qBAAS,GAAK,AAACvB,wCAAiB0B;AADtC,AAAA,0FAAA,yDAAA,2CAAA,wDAAA,mFAAA,SAAA,OAAA,kBAAA,sFAAA,8EAAA,tGAGsB,GAAKH,kFACLC;;AAIxB,4CAAA,5CAAMG,gGACHC;AADH,AAEE,SAAI,AAACC,uBAAOD,WAKR,AAACE,mBAAQ,qBAAA,rBAACC,iDAAwCH;;AAGxD,8BAAA,sCAAAI,pEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAf,4BAAAe;SAAA,AAAAd,4CAAAc,eAAA,hEACWZ;wBADX,AAAAF,4CAAAc,eAAA,/EACcX;eADd,AAAAH,4CAAAc,eAAA,tEACgCE,mIACdV;wBAFlB,AAAAN,4CAAAc,eAAA,/EACyCG,8JAEdX;eAH3B,AAAAN,4CAAAc,eAAA,tEAC2DI,mIAGzCZ;mBAJlB,AAAAN,4CAAAc,eAAA,1EACoEK,gJAI9Cb;AALtB,AAME;AAAA,AACE,qGAAA,rGAACc,oHAAoBD;;AACrB,IAAAE,WACE,yBAAA,AAAA7C,RAAMY,wBAAO,AAACpB,2BAAUkC,GAAGC;IACrBmB,qBAAa,AAACd,0CAAmBpB;AADvC,AAEE,GAAIkC;AAAa,CAACL,kDAAAA,oDAAAA;;AAAmB,CAACD,yCAAAA,2CAAAA;;;AAFxC,0FAAA,mDAAA,mFAAA,sDAAA,2CAAA,wDAAA,mFAAA,wDAAA,qDAAA,OAAA,4DAAA,mEAAA,aAAA,xPAGiC,sBAAA,KAAA,zBAAIM,gKAEblC,mJAEG,WAAKmC;AAAL,AAAQ,IAAAC,WAAU,AAAA,AAAID;AAAd,AAAA,wFAAAC,+BAAAA,/GAACN,yCAAAA,mDAAAA;mBACjC,2BAAA,AAAA,mFAAA,8CAAA,2CAAA,wDAAA,yBAAA,sDAAA,5UAAM,GAAKI;;AAThB,AAAA,gGAAAD,mCAAAA,3HAACF,6CAAAA,uDAAAA;;;AAaL,8CAAA,9CAAMM,oGACHC,EAAEC;AADL,AAIE,IAAAC,aAAqB,qDAAA,rDAACM,mDAAUR;UAAhC,AAAAG,4CAAAD,WAAA,IAAA,jEAAOG;UAAP,AAAAF,4CAAAD,WAAA,IAAA,jEAAWI;UAAX,AAAAH,4CAAAD,WAAA,IAAA,jEAAeK;IAAfH,aACqB,qDAAA,rDAACI,mDAAUP;UADhC,AAAAE,4CAAAC,WAAA,IAAA,jEACOK;UADP,AAAAN,4CAAAC,WAAA,IAAA,jEACWM;UADX,AAAAP,4CAAAC,WAAA,IAAA,jEACeO;IACTC,QAAM,AAACC,kBAAQ,kDAAA,IAAA,tDAACC,yIAAcP,IAAID,IAAID,aAAM,kDAAA,IAAA,tDAACS,yIAAcH,IAAID,IAAID;AAFzE,AAGE,SAAI,SAAA,RAAMG,kBACN,WAAA,VAAOA;;AAGf,8BAAA,sCAAAG,pEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA3C,4BAAA2C;eAAA,AAAA1C,4CAAA0C,eAAA,tEACWxB;eADX,AAAAlB,4CAAA0C,eAAA,tEAEW1B;SAFX,AAAAhB,4CAAA0C,eAAA,hEAGWxC;wBAHX,AAAAF,4CAAA0C,eAAA,/EAIWvC;wBAJX,AAAAH,4CAAA0C,eAAA,/EAKWzB;AALX,AAME,iBAAA,AAAAzC,bAAMoE,6BAAY,AAAC5E,2BAAU,AAAC6E,gDAAQ,oBAAA,IAAA,vBAAK,AAACC,eAAK5C,2BAAkB,+DAAA,/DAACX,6CAAKY;eAAzE,AAAA3B,XACMuE,2BAAU,AAAC/E,2BAAU,AAAC6E,gDAAQ,oBAAA,IAAA,vBAAK,AAACC,eAAK5C,yBAAgB,+DAAA,/DAACX,6CAAKY;IAC/D6C,0BAAkB,AAACvB,4CAAqBmB,WAAWG;IACnDE,0BAAwB,WAAKC;AAAL,AACE,oBAAA,AAAA1E,gBAAK,2BAAA,8EAAA,mFAAA,yDAAA,+DAAA,pTAACR;AACJ,IAAAmF,WAAQD;IAARC,eAAA,AAEE,kDAAAA,SAAA,mFAAA,IAAA,IAAA,+EAAA,rOAACC,sNAAuBC;;AAF1B,AAAA,GAIE,wFAAA,xFAACC,gDAAK,AAACC,gBAAM,AAACC,eAAKN;AACnB,oDAAAC,aAAA,mFAAA,8CAAA,2CAAA,wDAAA,yBAAA,vTAAC5D;;AALH4D;;;AAOAD;;;AAZlC,AAaE,GAAM,oDAAA,kDAAA,pGAAK,GAAK,AAACO,4BAAWb,qBACjB,GAAK,AAACa,4BAAWV,mBACjB,AAACvC,0CAAmBoC,iBACpB,AAACpC,0CAAmBuC;AAH/B,AAIE,GAAIC;AACF,IAAAU,iBAAA,WAAAC;AAAA,AAAoB,qDAAAA,iBAAA,sDAAA,rHAACC;;AAArB,AAAA,mGAAAF,8CAAAA,hJAACzC,kDAAAA,kEAAAA;;AACD,IAAA4C,iBAAA,WAAAC;AAAA,AAAW,qDAAAA,iBAAA,sDAAA,rHAACF;;AAAZ,AAAA,iFAAAC,qCAAAA,rHAAC7C,yCAAAA,yDAAAA;;;AANL;;AAbF,0FAAA,mDAAA,2CAAA,wDAAA,mFAAA,OAAA,iDAAA,mFAAA,8CAAA,2CAAA,wDAAA,eAAA,eAAA,mFAAA,qDAAA,2CAAA,wDAAA,eAAA,+GAAA,2CAAA,6IAAA,qMAAA,zZAuBKD,yHAAgB,AAAC8B,gDAAQ,oBAAA,IAAA,vBAAK,AAACC,eAAK5C,yGACL,+DAAA,/DAACX,6CAAKY,uIACf,WAAKoB;AAAL,AAAQ,IAAAwC,WAAA,WAAAC;AAAA,AAAW,qDAAAA,iBAAA,/DAACJ,sHAAerC;;AAA3B,AAAA,wFAAAwC,+BAAAA,/GAAC7C,yCAAAA,mDAAAA;GAzBpC,6DA0B2B;AAAA,AAAO,IAAA+C,WAAA,WAAAC;AAAA,AAAW,qDAAAA,iBAAA,uDAAA,tHAACN;;AAAZ,AAAA,wFAAAK,+BAAAA,/GAACjD,yCAAAA,mDAAAA;GA1BnC,+EA2BoC;AAAA,AAAO,IAAAmD,WAAA,WAAAC;AAAA,AAAoB,qDAAAA,iBAAA,uDAAA,tHAACR;;AAArB,AAAA,0GAAAO,wCAAAA,1IAAClD,kDAAAA,4DAAAA;GA3B5C,sHAAA,mFAAA,8CAAA,2CAAA,wDAAA,eAAA,aAAA,mFAAA,qDAAA,2CAAA,wDAAA,eAAA,+GAAA,2CAAA,2IAAA,iMAAA,hhCA4B+BgC,6nBAG1BlC,yHAAgB,AAAC8B,gDAAQ,oBAAA,IAAA,vBAAK,AAACC,eAAK5C,uGACL,+DAAA,/DAACX,6CAAKY,mIACf,WAAKoB;AAAL,AAAQ,IAAA8C,WAAA,WAAAC;AAAA,AAAW,qDAAAA,iBAAA,/DAACV,kHAAarC;;AAAzB,AAAA,wFAAA8C,+BAAAA,/GAACnD,yCAAAA,mDAAAA;GAjCpC,6DAkC2B;AAAA,AAAO,IAAAqD,WAAA,WAAAC;AAAA,AAAW,qDAAAA,iBAAA,mDAAA,lHAACZ;;AAAZ,AAAA,wFAAAW,+BAAAA,/GAACvD,yCAAAA,mDAAAA;GAlCnC,+EAmCoC;AAAA,AAAO,IAAAyD,WAAA,WAAAC;AAAA,AAAoB,qDAAAA,iBAAA,mDAAA,lHAACd;;AAArB,AAAA,0GAAAa,wCAAAA,1IAACxD,kDAAAA,4DAAAA;GAnC5C,sEAoC+BgC;;AAGjC,gDAAA,hDAAM0B,wGACHC,KAAKC,KAAKC,UAAUC;AADvB,AAIE,IAAAC,aAAA,AAAAC,cAAA,AAAAzG,gBAAgCX;IAAhCqH,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;QAAA,AAAAvD,4CAAAwD,WAAA,IAAA,/DAASW;IAATV,aAAA,AAAAzD,4CAAAwD,WAAA,IAAA;IAAAC,iBAAA,AAAAvF,4BAAAuF;QAAA,AAAAtF,4CAAAsF,eAAA,/DAAoBlH;YAApB,AAAA4B,4CAAAsF,eAAA,nEAAsBW;AAAtB,AAAA,AACE,GAAM,AAAC3C,gDAAK,CAAClF,kCAAAA,6CAAAA,bAAE0G,yBAAAA,YAAW,CAAC1G,kCAAAA,6CAAAA,bAAE2G,yBAAAA;AAA7B,AACE,AAACmB,sBAAOD,MAAM,CAAC7H,kCAAAA,6CAAAA,bAAE2G,yBAAAA;;AADnB;;AADF;AAAA,eAAAC;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAG,qBAAA,AAAAN,cAAAD;AAAA,AAAA,GAAAO;AAAA,AAAA,IAAAP,iBAAAO;AAAA,AAAA,GAAA,AAAAC,6BAAAR;AAAA,IAAAS,kBAAA,AAAAC,sBAAAV;AAAA,AAAA,eAAA,AAAAW,qBAAAX;eAAAS;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAAtC,gBAAAyB;QAAA,AAAAnD,4CAAAgE,WAAA,IAAA,/DAASG;IAATF,aAAA,AAAAjE,4CAAAgE,WAAA,IAAA;IAAAC,iBAAA,AAAA/F,4BAAA+F;QAAA,AAAA9F,4CAAA8F,eAAA,/DAAoB1H;YAApB,AAAA4B,4CAAA8F,eAAA,nEAAsBG;AAAtB,AAAA,AACE,GAAM,AAAC3C,gDAAK,CAAClF,kCAAAA,6CAAAA,bAAE0G,yBAAAA,YAAW,CAAC1G,kCAAAA,6CAAAA,bAAE2G,yBAAAA;AAA7B,AACE,AAACmB,sBAAOD,MAAM,CAAC7H,kCAAAA,6CAAAA,bAAE2G,yBAAAA;;AADnB;;AADF;AAAA,eAAA,AAAAgB,eAAAf;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAKF,iDAAA,jDAACmB,oBAAUpI,8GAAgC4G;AAI3C,8BAAA,9BAAMyB;AAAN,AAEE;AAAA,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,mFAAA,YAAA,uBAAA,+GAAA,2CAAA,vEAEIrF,oIAAsB;AAAA,AAAO,0GAAA,mFAAA,yDAAA,wEAAA,vTAACpC,mDAAMZ,6BAAYsI;GAFpD,+EAGmC;AAAA,AAAO,0GAAA,mFAAA,yDAAA,wEAAA,vTAAC1H,mDAAMZ,6BAAYsI;GAH7D,kDAAA,gEAAA,8EAAA,mFAAA,wEAAA,6DAM0B,WAAK9E;AAAL,AAAQ,uGAAA,hGAAC5C,mDAAMZ,6BAAYa,gFAAkB2C;mBANvE,+GAAA,2CAAA,kDAAA,+DAAA,8EAAA,mFAAA,uEAAA,haAOIoB,6dAEsB,WAAKvE;AAAL,AAAQ,wGAAA,jGAACO,mDAAMZ,6BAAYuI,gFAAmBlI;GATxE,6DAU0B,WAAKA;AAAL,AAAQ,2GAAA,mFAAA,yDAAA,hPAACO,mDAAMZ,6BAAYwI,uOAAgCnI;GAVrF,+EAWmC,WAAKA;AAAL,AAAQ,2GAAA,mFAAA,yDAAA,hPAACO,mDAAMZ,6BAAYwI,uOAAgCnI;mBAX9F,kHAAA,2CAAA,kDAAA,wEAAA,8EAAA,mFAAA,iEAAA,6DAAA,neAYI6B;AAZJ,AAc8B,0DAAA,2CAAA,gEAAA,GAAA,+DAAA,2CAAA,uDAAA,GAAA,mDAAA,xXAACiG,sBAAOnI","names":["js/date-field","js/date-field.views","js/date-field.views.subscriptions","date-field.views/subscriptions","cljs.core.atom","date-field.views/panel-state","date-field.views/subscribe","key_","ks","p1__43572#","f","cljs.core.get_in","atm","reagent.core.atom","cljs.core/deref","cljs.core/contains?","p1__43573#","cljs.core.swap_BANG_","cljs.core/assoc","date-field.views/contains-errors?","m","child-nodes","cljs.core.reduce","acc","el","cljs.core/map-entry?","value","cljs.core/val","cljs.core/boolean?","cljs.core.conj","cljs.core/map?","cljs.core.into","this","cljs.core/every?","cljs.core/false?","p__43574","map__43575","cljs.core/--destructure-map","cljs.core.get","date-field.views/submit-button","id","subscription-path","enabled?","on-click","cljs.core/identity","errors","date-field.views/valid-date-format?","date","cljs.core/empty?","cljs.core/boolean","cljs.core/re-matches","p__43576","map__43577","date-field.views/date-field","on-error","on-error-resolved","on-input","continuation","cljs.core.prn","G__43578","valid-input?","x","G__43579","date-field.views/dates-are-ascending?","a","b","vec__43580","cljs.core.nth","vec__43583","d-a","m-a","y-a","clojure.string.split","d-b","m-b","y-b","comp-","cljs.core/compare","clojure.string.join","p__43594","map__43595","date-field.views/date-range","start-date","cljs.core.keyword","cljs.core/name","end-date","valid-date-range?","date-field-continuation","hiccup","G__43596","cljs.core.update_in","cljs.core/conj","cljs.core.not_EQ_","cljs.core/first","cljs.core/last","clojure.string/blank?","G__43597","p1__43586#","cljs.core.assoc","G__43598","p1__43587#","G__43599","p1__43588#","G__43600","p1__43589#","G__43601","p1__43590#","G__43602","p1__43591#","G__43603","p1__43592#","G__43604","p1__43593#","date-field.views/watch-and-call-subscriptions","_key","_ref","old-value","new-value","seq__43605","cljs.core/seq","chunk__43606","count__43607","i__43608","vec__43617","map__43620","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__43621","map__43624","cljs.core/next","_","state","cljs.core/reset!","cljs.core/add-watch","date-field.views/main-panel","cljs.core/assoc-in","cljs.core/update","cljs.core/update-in"],"sourcesContent":["(ns date-field.views\n  (:require\n    [clojure.string :as str]\n    [reagent.core :as r]))\n\n\n(defonce subscriptions (atom {}))\n\n\n(def panel-state\n  (atom {:date-field \"\"\n         :date-range {:start \"\"\n                      :end \"\"}\n         :errors  {:date-field false\n                   :date-range {:start false\n                                :end false\n                                :value false}}}))\n\n\n(defn subscribe\n  [key_ ks]\n  (let [f #(get-in % ks)\n        atm (r/atom (f @panel-state))] ; initialize atom with state from panel-state\n\n    ;; check if a subscription is already registered because react rerenders componnents, and you don't want to register \n    ;; a new subscription every time\n    (if (contains? @subscriptions key_)\n      (get-in @subscriptions [key_ :state])\n      (do  (swap! subscriptions assoc key_ {:f #(get-in % ks)\n                                            :state atm})\n           atm))))\n\n\n;; not important\n(defn contains-errors?\n  [m]\n  (let [child-nodes (fn this\n                      [m]\n                      (reduce (fn [acc el]\n                                (if (map-entry? el)\n                                  (let [value (val el)]\n                                    (cond\n                                      (boolean? value)\n                                      (conj acc value)\n\n                                      (map? value)\n                                      (into acc (this value))))\n                                  el))\n                              []\n                              m))]\n    (not (every? false? (child-nodes m)))))\n\n\n(defn submit-button\n  [{:keys [id subscription-path enabled? on-click]\n    :or {enabled? true\n         on-click identity}}]\n  (let [errors @(subscribe id subscription-path)          ; new\n        enabled? (not (contains-errors? errors))]         ; new\n    [:button {:class [\"button\" \"my-3\"  \"is-dark\"]\n              :disabled (not enabled?)\n              :on-click on-click}\n     \"submit\"]))\n\n\n(defn valid-date-format?\n  [date]\n  (or (empty? date)\n      ;; FYI this is a bad way to validate dates.\n      ;; you should rely on your underlying date-time library\n      ;; for this validation but for the blogpost this is\n      ;; good enough\n      (boolean (re-matches #\"[\\d]{2}\\-[\\d]{2}\\-[\\d]{4}\" date))))\n\n\n(defn date-field\n  [{:keys [id subscription-path on-error on-error-resolved on-input continuation]\n    :or {on-error identity\n         on-error-resolved identity\n         on-input identity\n         continuation identity}}]\n  (fn []\n    (prn  \"continuation\" continuation)\n    (continuation\n      (let [value @(subscribe id subscription-path)                                            ; new\n            valid-input? (valid-date-format? value)]\n        (if valid-input? (on-error-resolved) (on-error))\n        [:div [:input {:class [\"input\" (if valid-input? nil \"is-danger\")]\n                       :type \"text\"\n                       :value value\n                       :placeholder \"DD-MM-YYYY\"\n                       :on-input (fn [x] (on-input (-> x .-target .-value)))}]\n         (when (not valid-input?)\n           [:p {:class \"help is-danger\"} \"incorrect input date format, use DD-MM-YYYY\"])]))))\n\n\n(defn dates-are-ascending?\n  [a b]\n  ;; naive date comparator\n  ;; converts DD-MM-YYYY to yyyy-mm-dd and compares the strings\n  (let [[d-a m-a y-a]  (str/split a #\"-\")\n        [d-b m-b y-b]  (str/split b #\"-\")\n        comp- (compare (str/join \"-\" [y-a m-a d-a]) (str/join \"-\" [y-b m-b d-b]))]\n    (or (neg? comp-)\n        (zero? comp-))))\n\n\n(defn date-range\n  [{:keys [on-input\n           on-error\n           id\n           subscription-path\n           on-error-resolved]}]\n  (let [start-date @(subscribe (keyword (str (name id) \"-\" \"start\")) (conj subscription-path :start))\n        end-date @(subscribe (keyword (str (name id) \"-\" \"end\")) (conj subscription-path :end))\n        valid-date-range? (dates-are-ascending? start-date end-date)\n        date-field-continuation (fn [hiccup]\n                                  (if @(subscribe :date-range-error [:errors :date-range :value])\n                                    (cond-> hiccup  ; [:div [:input {:class []\n                                      true\n                                      (update-in [1 1 :class] conj \"is-danger\")\n\n                                      (not= (first (last hiccup)) :p)\n                                      (conj [:p {:class \"help is-danger\"}\n                                             \"Incorrect date range. Start date can't be before end date.\"]))\n                                    hiccup))]\n    (when (and (not (str/blank? start-date))\n               (not (str/blank? end-date))\n               (valid-date-format? start-date)\n               (valid-date-format? end-date))\n      (if valid-date-range?\n        (on-error-resolved #(assoc % :value false))\n        (on-error #(assoc % :value true))))\n    [:div {:class [\"my-6\" \"is-flex is-align-items-center \"]}\n     [:p {:class \"pr-3\"} \"from\"]\n     [:span {:class \"pr-3\"}\n      [date-field {:id (keyword (str (name id) \"-\" \"start\"))                                ; new\n                   :subscription-path (conj subscription-path :start)                       ; new\n                   :on-input (fn [x] (on-input #(assoc % :start x)))\n                   :on-error (fn [] (on-error #(assoc % :start true)))\n                   :on-error-resolved (fn [] (on-error-resolved #(assoc % :start false)))\n                   :continuation date-field-continuation}]]\n     [:p {:class \"pr-3\"} \"to\"]\n     [:span {:class \"pr-3\"}\n      [date-field {:id (keyword (str (name id) \"-\" \"end\"))                                  ; new\n                   :subscription-path (conj subscription-path :end)                         ; new\n                   :on-input (fn [x] (on-input #(assoc % :end x)))\n                   :on-error (fn [] (on-error #(assoc % :end true)))\n                   :on-error-resolved (fn [] (on-error-resolved #(assoc % :end false)))\n                   :continuation date-field-continuation}]]]))\n\n\n(defn watch-and-call-subscriptions\n  [_key _ref old-value new-value]\n  ;; (prn \" watch-and-call-subscriptions\")\n  ;; (prn \"subs\" @subscriptions)\n  (doseq [[_  {:keys [f state]}] @subscriptions]\n    (when (not= (f old-value) (f new-value))\n      (reset! state (f new-value)))))\n\n\n(add-watch panel-state :watch-global-state watch-and-call-subscriptions)\n\n\n;; now the main-panel doesn't reference any atom!\n(defn main-panel\n  []\n  (fn []\n    [:div {:class [\"container\" \"my-6\"]}\n     [date-field {:on-error (fn [] (swap! panel-state assoc-in [:errors :date-field] true))\n                  :on-error-resolved (fn [] (swap! panel-state assoc-in [:errors :date-field] false))\n                  :id :date-field\n                  :subscription-path [:date-field]\n                  :on-input (fn [x] (swap! panel-state assoc :date-field x))}]\n     [date-range {:id :date-range\n                  :subscription-path [:date-range]\n                  :on-input (fn [f] (swap! panel-state update :date-range f))\n                  :on-error (fn [f] (swap! panel-state update-in [:errors :date-range] f))\n                  :on-error-resolved (fn [f] (swap! panel-state update-in [:errors :date-range] f))}]\n     [submit-button {:id :submit-button\n                     :subscription-path [:errors]\n                     :on-click #(reset! panel-state {:date-field \"\"\n                                                     :date-range {:start \"\"\n                                                                  :end \"\"}})}]]))\n"]}